<?php

namespace Tokimikichika\AbstractFactory\Component\Sms;

use Tokimikichika\AbstractFactory\Interface\SenderInterface;

/**
 * SMS-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
 */
class SmsSender implements SenderInterface
{
    private string $name = 'SMS Sender';
    /** @var array<string, mixed> */
    private array $settings = [
        'api_url' => 'https://api.sms-provider.com/send',
        'api_key' => 'your-api-key',
        'sender_name' => 'YourApp',
        'country_code' => '+7',
    ];

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     * @param string $recipient –ü–æ–ª—É—á–∞—Ç–µ–ª—å
     * @param string $subject –¢–µ–º–∞
     * @param string $content –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
     * @return bool –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    public function send(string $recipient, string $subject, string $content): bool
    {
        echo "üì± SMS Sender ({$this->name}):\n";
        echo "   API URL: {$this->settings['api_url']}\n";
        echo "   API Key: " . substr($this->settings['api_key'], 0, 8) . "...\n";
        echo "   –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {$this->settings['sender_name']}\n";
        echo "   –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞: {$recipient}\n";
        echo "   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {$content}\n";
        echo "   –î–ª–∏–Ω–∞: " . strlen($content) . " —Å–∏–º–≤–æ–ª–æ–≤\n\n";

        return true; // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
     * @return string –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
     * @param string $name –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
     * @return array<string, mixed> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
     */
    public function getSettings(): array
    {
        return $this->settings;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
     * @param array<string, mixed> $settings –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
     */
    public function setSettings(array $settings): void
    {
        $this->settings = array_merge($this->settings, $settings);
    }
}
